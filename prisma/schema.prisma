// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  CREATOR
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  active         Boolean         @default(false) // New
  activateTokens ActivateToken[]

  username     String?   @unique
  votes        Vote[]
  lastTimeVote DateTime?

  posts         Post[]
  comments      Comment[]
  sessions      Session[]
  postHearts    PostHeart[]
  blogHearts    BlogHeart[]
  commentHearts CommentHeart[]
  blogs         Blog[]

  role UserRole @default(USER)
}

model Vote {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  star   Star   @relation(fields: [starId], references: [id], onDelete: Cascade)
  starId Int

  @@index([starId])
  @@index([userId])
}

model Post {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  title     String
  published Boolean     @default(false)
  userId    String
  starId    Int?
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  hearts    PostHeart[]
  star      Star?       @relation(fields: [starId], references: [id], onDelete: Cascade)
  Image     Image[]

  @@index([id])
}

model Blog {
  id        String      @id @default(cuid())
  slug      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  imgSrc    String
  title     String
  content   Json?
  category  String
  views     Int         @default(0)
  published Boolean     @default(false)
  authorId  String
  starId    Int?
  user      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  hearts    BlogHeart[]
  comments  Comment[]
  star      Star?       @relation(fields: [starId], references: [id], onDelete: Cascade)
  Image     Image[]

  @@index([authorId])
  @@index([starId])
  @@index([title])
}

model BlogHeart {
  blogId String
  userId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
}

model PostHeart {
  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model Comment {
  id        String         @id @default(cuid())
  post      Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id])
  blog      Blog?          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?
  title     String
  postId    String?
  userId    String
  createdAt DateTime       @default(now())
  hearts    CommentHeart[]
  replyToId String?
  replyTo   Comment?       @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]      @relation("ReplyTo")

  @@index([userId])
}

model CommentHeart {
  commentId String
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model Star {
  id      Int    @id @default(autoincrement())
  name    String @unique
  picture String
  vote    Int
  posts   Post[]
  blogs   Blog[]
  Vote    Vote[]
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model Image {
  id        String   @id @default(uuid())
  blogId    String?
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([postId])
}
